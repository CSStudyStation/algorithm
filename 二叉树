二叉树

递归函数的两部分
* 递归终止条件；
* 递归过程；

递归函数使用场景
* 子问题具体相同的处理结构；

查找问题
一棵以 node 为根节点的二叉树中，是否包含值为 key 的节点。
bool contain(TreeNode* node, Key val) {
    if(node == NULL) {
        return false;
    }
    
    // 查看当前节点的值是否等于 val
    if(node->val == val) { 
        return true;
    }
    
    // 在当前节点的左子树和右子树上查找是否存在节点的值等于 val
    return (contain(node->left, val) || contain(node->right, val));
}


删除以 node 为根节点的二叉树内存空间
void destroy(TreeNode* node) {
    if(node == NULL) {
        return;
    }
    
    destroy(node->left);
    destroy(node->right);
    delete node;
}


LeetCode 104. Maximum Depth of Binary Tree
求一棵二叉树的最大深度，即从根节点到叶子节点的最大路径。
说明：叶子节点是没有节点的节点。

输入：[3, 9, 20, null, null, 15, 7]                                        输入：[1, 2, null, 3]
                                                    
                 3                                                                  1
              /     \                                                              /
             9      20                                                            2
                  /    \                                                         /      
                15      7                                                       3

输出： 3                                                                   输出：3

#include <iostream>

using namespace std;

/// Definition for a binary tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
public:
    int maxDepth(TreeNode* root) {
        // 递归终止条件
        if(root == NULL) {
            return 0;
        }
        // 叶子节点的高度为 1
        if(root->left == NULL && root->right == NULL) {
            return 1;
        }

        // 递归过程
        int leftDepth = maxDepth(root->left);
        int rightDepth = maxDepth(root->right);

        return max(leftDepth, rightDepth) + 1;
    }
};


LeetCode 111. Minimum Depth of Binary Tree
给定一棵二叉树，找出其最小深度，最小深度是从根节点到最近叶子节点的最短路径上的节点数量。

输入：[3, 9, 20, null, null, 15, 7]                                                   输入：[1, 2, null, 3]
                 3                                                                              1
              /     \                                                                          /
             9      20                                                                        2
                  /    \                                                                     /  
                 15     7                                                                   3

输出：2.                                                                              输出：3

#include <iostream>

using namespace std;

/// Definition for a binary tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};


class Solution {
public:
    int minDepth(TreeNode* root) {
        if(root == NULL) {
            return 0;
        }

        if(root->left == NULL && root->right == NULL) {
            return 1;
        }
        
        int leftDepth = minDepth(root->left);
        int rightDepth = minDepth(root->right);

        // 路径要存在
        return (leftDepth && rightDepth) ? (min(leftDepth, rightDepth) + 1) : (leftDepth + rightDepth + 1);
    }
};


LeetCode 226. Invert Binary Tree
反转一棵二叉树

示例：
输入：[4, 2, 7, 1, 3, 6, 9]                                    输出：
                4                                                     4
             /     \                                              /      \
           2         7                 ==>                      7          2
         /  \      /  \                                       /   \      /   \
        1    3    6    9                                     9     6    3     1

#include <iostream>

using namespace std;

/// Definition for a binary tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {

        // 递归终止条件
        if(root == NULL) {
            return NULL;
        }
        
        // 递归过程
        invertTree(root->left);
        invertTree(root->right);
        swap(root->left, root->right);

        return root;
    }
};


LeetCode 100. same tree
给出两棵二叉树，判断这两棵二叉树是否完全一样。 

示例：
输入：p = [4, 2, 7, 1, 3, 6, 9],                        q = [4. 2, 7, 1, 3, 6, 9]                                                       
                4                                                  4
             /     \                                           /       \
           2        7                                         2         7
          / \      / \                                      /   \      /  \
         1   3    6   9                                    1     3    6    9

输出：true

#include <iostream>

using namespace std;

/// Definition for a tree node;
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        // 递归终止条件
        if(p == NULL && q == NULL) {
            return true;
        }
        
        // 递归过程
        if(p != NULL && q != NULL && p->val == q->val) {
            return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
        } else {
            return false;
        }
    }
};


LeetCode 101. Symmetric Tree
给出一棵二叉树，判断其是否是左右对称的。

输入：[1, 2, 2, 3, 4, 4, 3]                                                             输入： [1, 2, 2, null, 3, null, 3]
             1                                                                                            1
          /      \                                                                                      /   \
         2        2                                                                                    2     2
       /  \      /  \                                                                                   \     \
      3    4    4    3                                                                                   3     3
           
输出：true                                                                              输出：false

#include <iostream>

using namespace std;

/// Definition for a binary tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL)  {}
};

class Solution {
private:
    bool isMirror(TreeNode* p, TreeNode* q) {
        // 递归终止条件
        if(p == NULL && q == NULL) {             // 以 p、q 为根节点的二叉树同时为空
            return true;
        }
        
        if(p == NULL || q == NULL) {            // 以 p、q 为根节点的二叉树其中一个为空
            return false;
        }

        // 递归过程
        return (p->val == q->val) && isMirror(p->left, q->right) && isMirror(p->right, q->left);
    }

public:
    bool isSymmetric(TreeNode* root) {
        return isMirror(root, root);
    }
};


LeetCode 222. Count Complete Tree Nodes
给定一棵完全二叉树，求完全二叉树的节点个数。

解释：
完全二叉树的定义：除了最后一层，所有层的节点数达到了最大，于此同时，最后一层的所有节点都在最左侧。（堆的实现使用的是完全二叉树）
满二叉树的定义：所有层的节点数达到最大。

/// Definition for a binary tree node.
struct TreeNode {
     int val;
     TreeNode *left;
     TreeNode *right;
     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 };

class Solution {
public:
    int countNodes(TreeNode* root) {
        int count = 0;
        if(root == NULL)
            return 0;
        
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()) {
            TreeNode* node = q.front();     // 查看队列头部元素
            q.pop();                        
            count++;

            if(node->left)                  // 若有左孩子
                q.push(node->left);
            if(node->right)                 // 若有右孩子
                q.push(node->right);
        }

        return count;
    }
};



LeetCode 110. Balanced Binary Tree
判断一棵树是否为平衡二叉树。

平衡二叉树：每一个节点的左右子树的高度差不超过 1。

/// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
private:
    bool balanced = true;                           // 定义全局变量

    // 计算 root 为根的二叉树的高度
    int height(TreeNode* root) {
        if(root == NULL || balanced == false)       // 加入 balanced 判断可以提前终止递归，进行优化
            return 0;
        if(root->left == NULL && root->right == NULL)
            return 1;

        int leftHeight = height(root->left);        // 计算左子树的高度
        int rightHeight = height(root->right);      // 计算右子树的高度

        if(abs(leftHeight - rightHeight) > 1) {
            balanced = false;
        }

        return max(leftHeight, rightHeight)+1;      // 返回以当前节点为根的二叉树的高度
    }

public:
    bool isBalanced(TreeNode* root) {
        height(root);

        return balanced;
    }
};


LeetCode 112. Path Sum
给出一棵二叉树以及一个数字 sum，判断在这颗二叉树上是否存在一条从根到叶子的路径，其路径上的所有节点和为 sum。 

示例:
输入: [5, 4, 8, 11, null, 13, 4, 7, 2, null, null, null, 1], sum = 22.
                            5                                                     
                        /      \          
                      4         8                
                    /        /     \
                  11        13      4    
                /    \                \
              7       2                1
输出: true.

解释：
根节点到叶子节点的路径：5 —> 4 —> 11 —> 2

#include <iostream>

using namespace std;

/// Definition for a binary tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
public:
    bool hasPathSum(TreeNode* root, int sum) {
        // 递归终止：访问的节点空
        if(root == NULL) {
            return false;
        }

        // 递归终止条件：访问到叶子节点
        if( root->left == NULL && root->right == NULL ) {
            return root->val == sum;    // 叶子节点是否为我们要找的值
        }
        
        if(hasPathSum(root->left, sum - root->val) || hasPathSum(root->right, sum - root->val)) {
            return true;
        }

        return false;
    }
};


LeetCode 404. Sum of Left Leaves
求出一棵二叉树所有的左叶子相加的和。

示例：
输入：[3, 9, 20, null, null, 15, 7]
                 3   
              /     \    
            9        20   
                   /   \   
                 15     7  

输出：24

解释：在这棵二叉树中，一共有两个左叶子，分别为 9 和 15，所以返回 24；

#include <iostream>

using namespace std;

/// Definition for a binary tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

// 递归
class Solution {
private:
    void calculate(TreeNode* node, int& sum) {
        // 递归终止条件
        if(node == NULL) {
            return;
        }
        
        // 递归过程
        // 判断当前节点的左孩子是否为左叶子，若是则进行求和计算
        if(node->left && node->left->left == NULL && node->left->right == NULL) {
            sum += node->left->val;
        }
        
        calculate(node->left, sum);
        calculate(node->right, sum);
    }

public:
    int sumOfLeftLeaves(TreeNode* root) {
        int sum = 0;
        calculate(root, sum);
        return sum;
    }
};

// 非递归，使用层序遍历的思想
// Time Complexiy: O(n), where n is the numbers of the tree.
// Space Complexity: O(n)
class Solution {
public:
    int sumOfLeftLeaves(TreeNode* root) {
        int sum = 0;
        if(root == NULL)
            return 0;
        
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()) {
            TreeNode* node = q.front();
            q.pop();

            // 判断 node 是否有左叶子节点
            if(node->left && node->left->left == NULL && node->left->right ==NULL){
                sum += node->left->val;
            }

            if(node->left)
                q.push(node->left);
            
            if(node->right)
                q.push(node->right);
        }

        return sum;
    }
};


LeetCode 257. Binary Tree Paths
给定一棵二叉树，返回从根节点到叶子节点路径的所有字符串。

示例：
输入：[1, 2, 3, null, 5]
                 1   
              /     \    
             2       3   
              \       
               5  

输出：["1 -> 2 -> 5", "1 -> 3"]

#include <iostream>
#include <string>
#include <vector>

using namespace std;

/// Definition for binary tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> res;
        
        // 递归终止条件
        // 以 root 为根的二叉树非空
        if(root == NULL) {
            return res;
        }
        if(root->left == NULL && root->right == NULL) {
            res.push_back( to_string(root->val) );
            return res;
        }

        // 递归过程        
        vector<string> leftStr = binaryTreePaths(root->left);             // 以当前节点的左子树为根，求出根节点到叶子节点路径的所有字符串
        for(int i = 0; i < leftStr.size(); i++) {
            res.push_back( to_string(root->val) + "->" + leftStr[i] );    // 拼接上当前节点
        }

        vector<string> rightStr = binaryTreePaths(root->right);           // 以当前节点的左子树为根，求出根节点到叶子节点路径的所有字符串
        for(int i = 0; i < rightStr.size(); i++) {
            res.push_back( to_string(root->val) + "->" + rightStr[i]);    // 拼接上当前节点
        }
        
        return res;
    }
};


LeetCode 113. Path Sum ||
给定一棵二叉树，返回所有从根节点到叶子节点的路径，使得其和为给定的 sum。

示例：
输入：[5, 4, 8, 11, null, 13, 4, 7, 2, null, null, 5, 1], sum = 22
                        5                                                     
                    /      \          
                  4         8                
                /        /     \
              11        13      4    
            /    \            /    \
           7      2          5      1

输出：[[5, 4, 11, 2], [5, 8, 4, 5]]

#include <iostream>
#include <vector>

using namespace std;

/// Definition for a binary tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

// 递归，深度优先遍历
class Solution {
private:
    void DFS(TreeNode* node, int sum, vector<int> temp, vector<vector<int>>& res) {
        // 递归终止条件
        if(node == NULL) {
            return;
        }
        
        sum = sum - node->val;
        temp.push_back(node->val);

        if(node->left == NULL && node->right == NULL && sum == 0) {
            res.push_back(temp);            // 仅满足条件的路径，才进行保存
            return;
        }
        
        // 递归过程
        DFS(node->left, sum, temp, res);
        DFS(node->right, sum, temp, res);
    }
    
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<int> temp;
        vector<vector<int>> res;
        
        DFS(root, sum, temp, res);

        return res;
    }
};


LeetCode 129. Sum Root to Leaf Numbers
给定一棵二叉树，每个节点只包含数字 0—9，从根节点到叶子节点的每条路径可以表示成一个数字，求这些数字的和。

示例：
输入：[4, 9, 0, 5, 1]
            4
         /    \
        9      0
      /   \
     5     1

输出：1026

解释：
从根到叶子节点路径 4 -> 9 -> 5 代表数字 495.
从根到叶子节点路径 4 -> 9 -> 1 代表数字 491.
从根到叶子节点路径 4 -> 0      代表数字 40.
因此，数字总和 = 495 + 491 + 40 = 1026.

#include <iostream>
#include <vector>

using namespace std;

/// Definition for binary tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
private:
    // 当遍历到 root 节点时，其上游所有父节点所构成的数字为 sum
    void pathValues(TreeNode* root, int sum, vector<int>& values) {
        // 递归终止条件
        if(root == NULL) {
            return;
        }

        // 当走到每个叶子节点时，就将计算出的数字加入到数组中
        if(root->left == NULL && root->right == NULL) {
            values.push_back(sum * 10 + root->val); 
            return;
        }
        
        // 递归过程
        pathValues(root->left, sum * 10 + root->val, values);
        pathValues(root->right, sum * 10 + root->val, values);
    }
    
public:
    int sumNumbers(TreeNode* root) {
        int sum = 0;
        vector<int> values;   // 保存每一个从根节点到每个叶子节点组成的数字

        pathValues(root, sum, values);

        for(int i = 0; i < values.size(); i++) {
            sum += values[i];
        }
        return sum;
    }
};


LeetCode 437. Path Sum III
给出一棵二叉树以及一个数字 sum，判断在这颗二叉树上存在多少条路径，其路径上的所有节点和为 sum。
其中路径不一定要起始于根节点，终止与叶子节点。
路径可以从任意节点开始，但是只能向下走。

示例：
输入：[10, 5, -3, 3, 2, null, 11, 3, -2, null, 1], sum = 8
                        10
                    /        \
                   5         -3
                 /   \          \
                3     2          11
              /   \     \
             3    -2     1

输出：3

解释：
路径一：5 —> 3
路径二：5 —> 2 —> 1
路径三：-3 —> 11

#include<iostream>

using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
private:
    // 在以 node 为根的二叉树中，寻找有多少条包含 node 节点的路径，使其和为 sum
    int findPath(TreeNode* node, int sum) {
        if(node == NULL) {
            return 0;
        }

        int res = 0;
        if(node->val == sum) {
            res += 1;
        }
        
        res += findPath(node->left, sum - node->val);
        res += findPath(node->right, sum - node->val);
        
        return res;
    }

public:
    int pathSum(TreeNode* root, int sum) {
        if(root == NULL) {
            return 0;
        }
        
        int res = findPath(root, sum);
        res += pathSum(root->left, sum);
        res += pathSum(root->right, sum);

        return res;
    }
};





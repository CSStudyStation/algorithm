字符串

C++ 常用内置函数
* islower(char c)  是否为小写字母
* isuppper(char c) 是否为大写字母
* isdigit(char c)  是否为数字
* isalpha(char c)  是否为字母
* isalnum(char c)  是否为字母或者数字
* toupper(char c)  字母小写转大写
* tolower(char c)  字母大写转小写

剑指 Offer 50
在一个字符串中找到第一个只出现一次的字符。（爱奇艺）
输入："abaccdeff"
输出："b"

输入：""
输出：" "
class Solution {
public:
    char firstUniqChar(string s) {
        int record[256];
        memset(record, 0, sizeof(record));
        
        for (int i = 0; i < s.size(); i++) {
            record[s[i]]++;
        }

        for (int i = 0; i < s.size(); i++) {
            if(record[s[i]] == 1) {
                return s[i];
            }
        }

        return ' ';
    }
};


Leetcode 387 字符串中第一个唯一字符
给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。

示例：
s = "leetcode"
返回 0

s = "loveleetcode"
返回 2
class Solution {
public:
    int firstUniqChar(string s) {
        int freq[256] = {0};
        for (int i = 0; i < s.size(); i++) {
            freq[s[i]]++;
        }

        for(int i = 0; i < s.size(); i++) {
            if(freq[s[i]] == 1)
                return i;
        }
        return -1;
    }
};



Leetcode 344 Reverse String
编写一个函数，将输入的字符串反转过来，输入字符串以字符数组 char[] 的形式给出。
不要分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间。

#include <iostream>
#include <vector>

using namespace std;

// Two Pointers 双指针技术
// Time Complexity: O(n)
// Space Complexity: O(1)
class Solution {
public:
    void reverseString(string& s) {
        int i = 0;
        int j = s.size() - 1;
        while(i < j) {
            swap(s[i], s[j]);
            i++;
            j--;
        }
        return;
    }
};


Leetcode 345 Reverse Vowels of a String
给定一个字符串，将该字符串中的元音字母翻转。

示例：
输入："hello" 
输出："holle"

输入："leetcode"
输出："leotcede"

#include <iostream>

using namespace std;

// Two pointer 双指针技术
// Time Complexity: O(n)
// Space Complexity: O(1)

class Solution {
public:
    string reverseVowelString(string &s) {
        int i = next_vowel_index(s, 0);
        int j = pre_vowel_index(s, s.size()-1);
        
        while(i < j) {
            swap(s[i], s[j]);
            i = next_vowel_index(s, i+1);
            j = pre_vowel_index(s, j-1); 
        }
        
        return s;
    }

private:
    int next_vowel_index(string &s, int index) {
        for(i = index; i < s.size(); i++) {
            if(s[i] =='a' || s[i] == 'e' || s[i] == 'i' ||
               s[i] =='o' || s[i] == 'u') {
                return i;
            }
        }
        
        return s.size();
    }

    int pre_vowel_index(string &s, int index) {
        for(i = index; i >= 0; i—-) {
            if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' ||
               s[i] == 'o' || s[i] == 'u') {
                return i;
            }
        }
        
        return -1;
    }
};

Leetcode 7 Reverse Integer
给出一个 32 位的有符号整数，将这个有符号整数中的每位上的数字进行反转。

注意: 
假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。
请根据这个假设，如果反转后整数溢出那么就返回 0。

示例
输入：123
输出：321

输入：-123
输出：-321

输入：120
输出：21

#include <iostream>

using namespace std;

class Solution {
public:
    int reverse(int x) {
        int res = 0;
        int flag = 1;     // 先标记为正整数

        if(x < 0 ) { 
            if(x == INT_MIN) { 
                return 0; 
            }

            flag = -1;
            x = -x;
        }

        while(x != 0) {
            int r = x % 10;
            // 溢出处理
            if(res > INT_MAX / 10 || (res == INT_MAX / 10 && r > 7)) {
                return 0;
            }
            res = res * 10 + r;
            x = x / 10;
        }

        return flag > 0 ? res : -res;
    }
};



8 String To Integer（atoi）
实现一个 atoi 函数，使其能将字符串转换成整数。

首先，该函数会根据需要，丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。
接下来的转化规则如下：
* 如果第一个非空字符为正号或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。
* 假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。
* 该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。

注意：
假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。在任何情况下，若函数不能进行有效的转换时，请返回 0 。

提示：
本题中的空白字符只包括空格字符 ' ' 。
假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−2^31,  2^31 − 1]。如果数值超过这个范围，请返回  INT_MAX (2^31 − 1) 或 INT_MIN (−2^31) 。

示例：
输入："42"
输出：42

输入："   -42"
输出：-42
解释：第一个非空格字符是 ‘-'

输入："4193 with words”
输出：4193
解释：在 3 时转化停止，因为它的下一个字符不是数字。

输入："words and 987”
输出：0
解释：第一个非空字符是 'w'，它不是数字、+ - 字符，转化失败

输入："-91283472332"
输出：-2147483648
解释：这个数字 "-91283472332” 超出了 32 位有符号整数。因此返回 INT_MIN（-2^31）。

#include <iostream>
#inlcude <string>

using namespace std;

class Solution {
public:
    int myAtoi(string str) {
        int res = 0;
        int flag = 1;     // 默认为正数

        int i = 0;
        while(str[i] == ' ') { i++; }                 // 跳过前面的空格
        if(str[i] == '-') { flag = -1; }              // 标记负数
        if(str[i] == '+' || str[i] == '-') { i++; }   // 后移指针

        while(i < str.size() && isdigit(str[i])) {
            int r = str[i] - '0';                    // 将字符转为整数

            // 溢出处理：
            // 对溢出的处理方式通常可转化为 INT_MAX 的逆操作；
            // 比如判断某数乘 10 是否会溢出，那么就把该数与 INT_MAX 除 10 比较。
            if(res > INT_MAX / 10 || (res == INT_MAX / 10 && r > 7)) {
                return flag > 0 ? INT_MAX : INT_MIN;
            }
            
            res = res * 10 + r;          // 推入，乘 10 操作和累加操作都可能产生溢出
            i++;
        }
        
        return flag > 0 ? res : -res;    // 根据正负号，返回最终结果
    }
};

